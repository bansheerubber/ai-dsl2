WHITESPACE_WITHOUT_NEWLINE = _{ " " | "\t" }
WHITESPACE = _{ WHITESPACE_WITHOUT_NEWLINE | NEWLINE }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

alpha = _{ 'a'..'z' | 'A'..'Z' }
non_zero_digit = _{ '1'..'9' }
digit = _{ '0'..'9' }
special = _{ "_" }

integer = @{ (non_zero_digit ~ digit+) | digit }
float = @{ digit+ ~ "." ~ digit+ }
number = _{ float | integer }
string_literal = @{ (("'") ~ ('\x00'..'\x26' | '\x28'..'\xFF')* ~ ("'")) | (("\"") ~ ('\x00'..'\x21' | '\x23'..'\xFF')* ~ ("\"")) }

token = @{ (alpha | special) ~ (alpha | digit | special)+ }
type_token = @{ (alpha | special) ~ (alpha | digit | special)+ }
variable_declaration = { "let" ~ token ~ ":" ~ type_token ~ "=" ~ math }

function_args = { (math ~ ",")* ~ math }
function_call = { token ~ "(" ~ function_args? ~ ")" }

assignment_operator = { "=" | "+=" | "-=" | "*=" | "/=" | "&&=" | "||=" | "&=" | "|=" | "^=" }

addition = { "+" }
subtraction = { "-" }
multiplication = { "*" }
division = { "/" }
logical_and = { "&&" }
logical_or = { "||" }
bitwise_and = { "&" }
bitwise_or = { "|" }
bitwise_xor = { "^" }
greater_than = { ">" }
less_than = { "<" }
greater_than_equal_to = { ">=" }
less_than_equal_to = { "<=" }
equals = { "==" }
not_equals = { "!=" }

binary_operator = _{ addition | subtraction | multiplication | division | logical_and | logical_or | bitwise_and | bitwise_or | bitwise_xor | greater_than | less_than | greater_than_equal_to | less_than_equal_to | equals | not_equals }

negative = { "-" }
logical_not = { "!" }
bitwise_not = { "~" }
learned_value = { "#" }
unary_operator = _{ negative | logical_not | bitwise_not | learned_value }

operand = _{ number | string_literal | function_call | token }
primary = _{ operand | ( "(" ~ math ~ ")") }
math = { unary_operator? ~ primary ~ (binary_operator ~ unary_operator? ~ primary)* }

expression = _{ variable_declaration | math }

if_statement_body = { body* }
if_statement = { "if" ~ "(" ~ expression ~ ")" ~ "{" ~ if_statement_body ~ "}" ~ else_if_statement* ~ else_statement? }
else_if_statement = { "else if" ~ "(" ~ expression ~ ")" ~ "{" ~ if_statement_body ~ "}" }
else_statement = { "else" ~ "{" ~ if_statement_body ~ "}" }

while_loop = { "while" ~ "(" ~ expression ~ ")" ~ "{" ~ body* ~ "}" }
for_loop = { "for" ~ "(" ~ expression ~ ")" ~ "{" ~ body* ~ "}" }

function_declaration_args = { (token ~ ":" ~ type_token ~ ",")*  ~ token ~ ":" ~ type_token }
function_body = { body* }
function = { "function" ~ token ~ "(" ~ function_declaration_args? ~ ")" ~ (":" ~ type_token)? ~ "{" ~ function_body ~ "}" }

return_statement = { "return" ~ math }
loop_control = { "break" | "continue" }

line = _{ (loop_control ~ ";") | (return_statement ~ ";") | (expression ~ ";") }
body = _{ function | if_statement | while_loop | for_loop | line }

program = _{ SOI ~ body+ ~ EOI }
