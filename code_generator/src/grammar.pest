WHITESPACE_WITHOUT_NEWLINE = _{ " " | "\t" }
WHITESPACE = _{ WHITESPACE_WITHOUT_NEWLINE | NEWLINE }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }

alpha = _{ 'a'..'z' | 'A'..'Z' }
non_zero_digit = _{ '1'..'9' }
digit = _{ '0'..'9' }
special = _{ "_" }

integer = @{ (non_zero_digit ~ digit+) | digit }
float = @{ digit+ ~ "." ~ digit+ }
number = _{ float | integer }
string_literal = @{ (("'") ~ ('\x00'..'\x26' | '\x28'..'\xFF')* ~ ("'")) | (("\"") ~ ('\x00'..'\x21' | '\x23'..'\xFF')* ~ ("\"")) }

learned_value = { "#" }

token = @{ (alpha | special) ~ (alpha | digit | special)* }
property_access = { token ~ "." ~ token }
type_token = @{ (alpha | special) ~ (alpha | digit | special)* }
new_struct = { "new" ~ token }
variable_declaration = { "let" ~ token ~ ":" ~ type_token ~ ("=" ~ (new_struct | math))? }

function_args = { (math ~ ",")* ~ math }
function_call = { token ~ "(" ~ function_args? ~ ")" }

assignment_operator = { "=" | "+=" | "-=" | "*=" | "/=" | "&&=" | "||=" | "&=" | "|=" | "^=" }
property_assignment = { property_access ~ assignment_operator ~ math }
variable_assignment = { token ~ assignment_operator ~ (new_struct | math) }

addition = { "+" }
subtraction = { "-" }
multiplication = { "*" }
division = { "/" }
logical_and = { "&&" }
logical_or = { "||" }
bitwise_and = { "&" }
bitwise_or = { "|" }
bitwise_xor = { "^" }
greater_than = { ">" }
less_than = { "<" }
greater_than_equal_to = { ">=" }
less_than_equal_to = { "<=" }
equals = { "==" }
not_equals = { "!=" }

binary_operator = _{ addition | subtraction | multiplication | division | logical_and | logical_or | bitwise_and | bitwise_or | bitwise_xor | greater_than | less_than | greater_than_equal_to | less_than_equal_to | equals | not_equals }

negative = { "-" }
logical_not = { "!" }
bitwise_not = { "~" }
unary_operator = _{ negative | logical_not | bitwise_not }

operand = _{ learned_value | number | string_literal | function_call | property_access | token }
primary = _{ operand | ( "(" ~ math ~ ")") }
math = { unary_operator? ~ primary ~ (binary_operator ~ unary_operator? ~ primary)* }

expression = _{ variable_declaration | variable_assignment | property_assignment | math }

if_statement_body = { body* }
if_statement = { "if" ~ "(" ~ expression ~ ")" ~ "{" ~ if_statement_body ~ "}" ~ else_if_statement* ~ else_statement? }
else_if_statement = { "else if" ~ "(" ~ expression ~ ")" ~ "{" ~ if_statement_body ~ "}" }
else_statement = { "else" ~ "{" ~ if_statement_body ~ "}" }

loop_body = { body* }
while_loop = { "while" ~ "(" ~ expression ~ ")" ~ "{" ~ loop_body ~ "}" }
for_loop = { "for" ~ "(" ~ variable_declaration ~ ";" ~ expression ~ ";" ~ expression ~ ")" ~ "{" ~ loop_body ~ "}" }

function_declaration_args = { (token ~ ":" ~ type_token ~ ",")*  ~ token ~ ":" ~ type_token }
function_body = { body* }
function = { "function" ~ token ~ "(" ~ function_declaration_args? ~ ")" ~ (":" ~ type_token)? ~ "{" ~ function_body ~ "}" }

struct_field_declaration = { token ~ ":" ~ type_token ~ "," }
struct_declaration = { "struct" ~ token ~ "{" ~ struct_field_declaration* ~ "}" }

return_statement = { "return" ~ math }
void_return_statement = { "return" }
loop_control = { "break" | "continue" }

line = _{ (loop_control ~ ";") | (return_statement ~ ";") | (void_return_statement ~ ";") | (expression ~ ";") }
body = _{ function | if_statement | while_loop | for_loop | struct_declaration | line }

program = _{ SOI ~ body+ ~ EOI }
